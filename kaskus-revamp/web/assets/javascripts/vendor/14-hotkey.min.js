/*!
 * hotkeys-js v3.3.8
 * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies.
 *
 * Copyright (c) 2018 kenny wong <wowohoo@qq.com>
 * http://jaywcjlove.github.io/hotkeys
 *
 * Licensed under the MIT license.
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.hotkeys=t()}(this,function(){"use strict";
// 绑定事件
function f(e,t,n){e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent&&e.attachEvent("on"+t,function(){n(window.event)})}
// 修饰键转换成对应的键码
function l(e,t){for(var n=t.slice(0,t.length-1),o=0;o<n.length;o++)n[o]=e[n[o].toLowerCase()];return n}
// 处理传的key字符串转换成数组
function s(e){e||(e="");
// 快捷键可能包含','，需特殊处理
for(// 匹配任何空白字符,包括空格、制表符、换页符等等
var t=(e=e.replace(/\s/g,"")).split(","),n=t.lastIndexOf("")// 同时设置多个快捷键，以','分割
;0<=n;)t[n-1]+=",",t.splice(n,1),n=t.lastIndexOf("");return t}
// 比较修饰键的数组
function d(e,t){for(var n=e.length>=t.length?e:t,o=e.length>=t.length?t:e,r=!0,i=0;i<n.length;i++)-1===o.indexOf(n[i])&&(r=!1);return r}
// 设置获取当前范围（默认为'所有'）
function i(e){k=e||"all"}
// 获取当前范围
function p(){return k||"all"}
// 获取摁下绑定键的键值
function e(){return w.slice(0)}
// 表单控件控件判断 返回 Boolean
function t(e){var t=e.target||e.srcElement,n=t.tagName;
// 忽略这些情况下快捷键无效
return!("INPUT"===n||"SELECT"===n||"TEXTAREA"===n||t.isContentEditable)}
// 判断摁下的键是否为某个键，返回true或者false
function n(e){return"string"==typeof e&&(e=E(e)),-1!==w.indexOf(e)}
// 循环删除handlers中的所有 scope(范围)
function o(e,t){var n=void 0,o=void 0;for(var r in
// 没有指定scope，获取scope
e||(e=p()),b)if(Object.prototype.hasOwnProperty.call(b,r))for(n=b[r],o=0;o<n.length;)n[o].scope===e?n.splice(o,1):o++;
// 如果scope被删除，将scope重置为all
p()===e&&i(t||"all")}
// 清除修饰键
function u(e){var t=e.keyCode||e.which||e.charCode,n=w.indexOf(t);if(
// 从列表中清除按压过的键
0<=n&&w.splice(n,1),
// 修饰键 shiftKey altKey ctrlKey (command||metaKey) 清除
93!==t&&224!==t||(t=91),t in O)
// 将修饰键重置为false
for(var o in O[t]=!1,y)y[o]===t&&(g[o]=!1)}
// 解除绑定某个范围的快捷键
function r(e,t){for(var n=s(e),o=void 0,r=[],i=void 0,a=0;a<n.length;a++){
// 如何key不在 _handlers 中返回不做处理
if(
// 将组合快捷键拆分为数组
// 记录每个组合键中的修饰键的键码 返回数组
1<(o=n[a].split("+")).length&&(r=l(y,o)),e="*"===(
// 获取除修饰键外的键值key
e=o[o.length-1])?"*":E(e),
// 判断是否传入范围，没有就获取范围
t||(t=p()),!b[e])return;
// 清空 handlers 中数据，
// 让触发快捷键键之后没有事件执行到达解除快捷键绑定的目的
for(var c=0;c<b[e].length;c++)
// 判断是否在范围内并且键值相同
(i=b[e][c]).scope===t&&d(i.mods,r)&&(b[e][c]={})}}
// 对监听对应快捷键的回调函数进行处理
function h(e,t,n){var o=void 0;
// 看它是否在当前范围
if(t.scope===n||"all"===t.scope){for(var r in
// 检查是否匹配修饰符（如果有返回true）
o=0<t.mods.length,O)Object.prototype.hasOwnProperty.call(O,r)&&(!O[r]&&-1<t.mods.indexOf(+r)||O[r]&&-1===t.mods.indexOf(+r))&&(o=!1);
// 调用处理程序，如果是修饰键不做处理
(0!==t.mods.length||O[16]||O[18]||O[17]||O[91])&&!o&&"*"!==t.shortcut||!1===t.method(e,t)&&(e.preventDefault?e.preventDefault():e.returnValue=!1,e.stopPropagation&&e.stopPropagation(),e.cancelBubble&&(e.cancelBubble=!0))}}
// 处理keydown事件
function v(e){var t=b["*"],n=e.keyCode||e.which||e.charCode;if(
// 搜集绑定的键
-1===w.indexOf(n)&&w.push(n),
// Gecko(Firefox)的command键值224，在Webkit(Chrome)中保持一致
// Webkit左右command键值不一样
93!==n&&224!==n||(n=91),n in O){
// 将特殊字符的key注册到 hotkeys 上
for(var o in O[n]=!0,y)y[o]===n&&(g[o]=!0);if(!t)return}
// 将modifierMap里面的修饰键绑定到event中
for(var r in O)Object.prototype.hasOwnProperty.call(O,r)&&(O[r]=e[m[r]]);
// 表单控件过滤 默认表单控件不触发快捷键
if(g.filter.call(this,e)){
// 获取范围 默认为all
var i=p();
// 对任何快捷键都需要做的处理
if(t)for(var a=0;a<t.length;a++)t[a].scope===i&&h(e,t[a],i);
// key 不在_handlers中返回
if(n in b)for(var c=0;c<b[n].length;c++)
// 找到处理内容
h(e,b[n][c],i)}}function g(e,t,n){var o=s(e),r=[],i="all",a=document,c=0;// 需要处理的快捷键列表
// 对于每个快捷键进行处理
for(
// 对为设定范围的判断
void 0===n&&"function"==typeof t&&(n=t),"[object Object]"===Object.prototype.toString.call(t)&&(t.scope&&(i=t.scope),// eslint-disable-line
t.element&&(a=t.element)),"string"==typeof t&&(i=t);c<o.length;c++)// 按键列表
r=[],
// 如果是组合快捷键取得组合快捷键
1<(e=o[c].split("+")).length&&(r=l(y,e)),// *表示匹配所有快捷键
// 判断key是否在_handlers中，不在就赋一个空数组
(e="*"===(
// 将非修饰键转化为键码
e=e[e.length-1])?"*":E(e))in b||(b[e]=[]),b[e].push({scope:i,mods:r,shortcut:o[c],method:n,key:o[c]});
// 在全局document上设置快捷键
void 0===a||x||(x=!0,f(a,"keydown",function(e){v(e)}),f(a,"keyup",function(e){u(e)}))}
// F1~F12 特殊键
for(var a="undefined"!=typeof navigator&&0<navigator.userAgent.toLowerCase().indexOf("firefox"),c={// 特殊键
backspace:8,tab:9,clear:12,enter:13,return:13,esc:27,escape:27,space:32,left:37,up:38,right:39,down:40,del:46,delete:46,ins:45,insert:45,home:36,end:35,pageup:33,pagedown:34,capslock:20,"⇪":20,",":188,".":190,"/":191,"`":192,"-":a?173:189,"=":a?61:187,";":a?59:186,"'":222,"[":219,"]":221,"\\":220},y={// 修饰键
"⇧":16,shift:16,"⌥":18,alt:18,option:18,"⌃":17,ctrl:17,control:17,"⌘":a?224:91,cmd:a?224:91,command:a?224:91},w=[],m={16:"shiftKey",18:"altKey",17:"ctrlKey"},O={16:!1,18:!1,17:!1},b={},C=1;C<20;C++)c["f"+C]=111+C;
// 兼容Firefox处理
m[a?224:91]="metaKey",O[a?224:91]=!1;var k="all",x=!1,E=function e(t){return c[t.toLowerCase()]||y[t.toLowerCase()]||t.toUpperCase().charCodeAt(0)},P={setScope:i,getScope:p,deleteScope:o,getPressedKeyCodes:e,isPressed:n,filter:t,unbind:r};// 默认热键范围
for(var j in P)Object.prototype.hasOwnProperty.call(P,j)&&(g[j]=P[j]);if("undefined"!=typeof window){var L=window.hotkeys;g.noConflict=function(e){return e&&window.hotkeys===g&&(window.hotkeys=L),g},window.hotkeys=g}return g});